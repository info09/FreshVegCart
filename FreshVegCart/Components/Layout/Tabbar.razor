@inject NavigationManager NavigationManager
<div class="tabbar bg-app-primary text-white">
    @foreach (var item in _menuItems)
    {
        var iconClassPrefix = "bx";
        var activeClass = "text-secondary";
        if(item.Url == _selectedPageUrl)
        {
            iconClassPrefix = "bxs";
            activeClass = "text-app-primary";
        }
        <div class="tabbar-item d-flex flex-column @activeClass" onclick="@item.OnTap">
            <i class="icon bx @iconClassPrefix-@item.Icon"></i>
            <span class="title">@item.Label</span>
        </div>
    }
</div>

@code {
    private static MenuItem[] _menuItems = [];

    private string _selectedPageUrl = PageRoutes.Home;

    protected override void OnInitialized()
    {
        _menuItems = [
            new("Home", "home", PageRoutes.Home, () => NavigateTo(PageRoutes.Home)),
            new("Cart", "cart", PageRoutes.Cart, () => NavigateTo(PageRoutes.Cart)),
            new("Orders", "objects-horizontal-left", PageRoutes.Orders, () => NavigateTo(PageRoutes.Orders)),
            new("Profile", "user", PageRoutes.Profile, () => NavigateTo(PageRoutes.Profile)),
            new("Help", "help-circle", PageRoutes.Help, () => NavigateTo(PageRoutes.Help)),
    ];

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void NavigateTo(string url) => NavigationManager.NavigateTo(url);

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _selectedPageUrl = e.Location.Replace(NavigationManager.BaseUri, "/");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose() => NavigationManager.LocationChanged -= OnLocationChanged;

    private record struct MenuItem(string Label, string Icon, string Url, Action OnTap);

    private static class PageRoutes
    {
        public const string Home = "/";
        public const string Cart = "/cart";
        public const string Orders = "/orders";
        public const string Profile = "/profile";
        public const string Help = "/help";
    }
}
